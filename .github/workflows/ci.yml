# .github/workflows/ci.yml
name: FastAPI CI/CD Pipeline

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "develop" ] # Runs on pushes to main or develop
  pull_request:
    branches: [ "main", "develop" ] # Runs on pull requests targeting main or develop

jobs:
  build-and-test:
    name: Build, Lint, and Test (Python 3.13) # Updated job name for clarity
    runs-on: ubuntu-latest # Specifies the type of runner

    strategy:
      matrix:
        python-version: ["3.13"] # MODIFIED: Only run for Python 3.13

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Cache pip dependencies

      # Step 3: Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # If flake8 & black are in requirements.txt, they are installed here.
          # Otherwise, they are installed in their specific steps below.

      # Step 4: Lint with Flake8
      - name: Lint with Flake8
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Ensuring Flake8 is installed..."
          python -m pip install flake8
          echo "Running Flake8..."
          flake8 . --count --max-complexity=12 --max-line-length=119 --show-source --statistics

      # Step 5: Format with Black (Check Mode)
      - name: Check formatting with Black
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Ensuring Black is installed..."
          python -m pip install black
          echo "Checking formatting with Black..."
          black --check .

      # Step 6: Test with Pytest
      - name: Test with Pytest
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          echo "Running Pytest..."
          pytest test/ --cov=app --cov-report=xml --cov-report=term-missing
          # Adjust 'test/' to your actual test directory name if different (e.g., 'tests/')

      # Step 7: Build Docker image (verifies Dockerfile is working)
      - name: Build Docker image
        if: success() # Only run if previous steps were successful
        run: |
          docker build . --file Dockerfile --tag your-app-name:${{ github.sha }}
          # IMPORTANT: Replace 'your-app-name' with your actual image name.

  # Optional Job: Push Docker image to GitHub Container Registry (GHCR)
  push-to-ghcr:
    name: Push Docker Image to GHCR
    needs: build-and-test # Depends on the build-and-test job succeeding
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/your-app-name:latest
            ghcr.io/${{ github.repository_owner }}/your-app-name:${{ github.sha }}
            # IMPORTANT: Replace 'your-app-name' with your actual image name.
            # e.g., ghcr.io/ariandokoohaki/todo-app:latest

  # Placeholder for Deployment Job
  # deploy-to-production:
  #   name: Deploy to Production
  #   # ... (rest of deployment job)
